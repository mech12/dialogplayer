package com.wecandoit.jinju_0_0_4;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.actionbarsherlock.sample.demos.*;
import com.actionbarsherlock.view.*;
import com.wecandoit.jinju_0_0_4.*;
import com.wecandoit.jinju_mech_lib.*;
 
import android.support.v4.app.FragmentTransaction;
import android.support.v4.app.Fragment;
import android.app.*;
import android.content.*;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.app.FragmentManager;
import android.support.v4.widget.DrawerLayout;
import android.util.*;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.support.v4.view.GravityCompat;
 
public class MainActivity extends SherlockFragmentActivity {
	private final String TAG = "jinju_v0.0.2::MainActivity";

	// Declare Variables
	DrawerLayout mDrawerLayout;
	ListView mDrawerList;
	ActionBarDrawerToggle mDrawerToggle;
	jNaviDraw_MenuListAdapter mMenuAdapter;
	String[] title;
	String[] subtitle;
	int[] icon;
	Fragment fragment_home = new Fragment_home();
	Fragment fragment_myfile = new Fragment_myfile();
	
	private CharSequence mDrawerTitle;
	private CharSequence mTitle;
	
	private ActionBar actionBar;
	MenuItem mSearch;

 
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// Get the view from drawer_main.xml
		setContentView(R.layout.dw_drawer_main);
		
		String ip = "logio.test.clipeo.com", port = "28177";
		jG.Log = new ClientThread("jinju", ip, port);
		new Thread(jG.Log).start();
		Log.d(TAG, "jG.Log is start!!");

 
		// Get the Title
		mDrawerTitle = getTitle();
		mTitle = "SMP/";
 
		// Generate title
		title = new String[] { 
				getString(R.string.side_home),
				getString(R.string.side_myfile),
				getString(R.string.side_speach),
				getString(R.string.side_music), 
				getString(R.string.side_dance), };
		// Generate subtitle
		subtitle = new String[] { 
				"",
				"로컬에 저장된 나의 파일목록",
				"인기 연설및 대화 동영상",
				"따라 부르세요",
				"따라 하세요.",
				};
 
		// Generate icon
		icon = new int[] { R.drawable.side_home, R.drawable.side_myfile,
				R.drawable.side_dialog, R.drawable.side_music,
				R.drawable.side_dance, };
 
		// Locate DrawerLayout in drawer_main.xml
		mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
 
		// Locate ListView in drawer_main.xml
		mDrawerList = (ListView) findViewById(R.id.listview_drawer);
 
		// Set a custom shadow that overlays the main content when the drawer
		// opens
		mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,
				GravityCompat.START);
 
		// Pass string arrays to jNaviDraw_MenuListAdapter
		mMenuAdapter = new jNaviDraw_MenuListAdapter(MainActivity.this, title,
				subtitle, icon);
 
		// Set the MenuListAdapter to the ListView
		mDrawerList.setAdapter(mMenuAdapter);
 
		// Capture listview menu item click
		mDrawerList.setOnItemClickListener(new DrawerItemClickListener());
 
		// Enable ActionBar app icon to behave as action to toggle nav drawer
		getSupportActionBar().setHomeButtonEnabled(true);
		getSupportActionBar().setDisplayHomeAsUpEnabled(true);
 
		// ActionBarDrawerToggle ties together the the proper interactions
		// between the sliding drawer and the action bar app icon
		mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
				R.drawable.ic_drawer, R.string.drawer_open,
				R.string.drawer_close) {

			public void onDrawerClosed(View view) {
				jG.Log.d("onDrawerClosed");

				super.onDrawerClosed(view);
			}

			public void onDrawerOpened(View drawerView) {
				// Set the title on the action when drawer open
				jG.Log.d("onDrawerOpened");
				getSupportActionBar().setTitle(mDrawerTitle);
				super.onDrawerOpened(drawerView);
			}
		};
 
		mDrawerLayout.setDrawerListener(mDrawerToggle);
 
		if (savedInstanceState == null) {
			selectItem(0);
		}
		if (jG.Log.isConnect) {
			String str = String.format("jLog is connected : %s : %s", ip, port);
			Log.d(TAG, str);
			jG.Log.d(str);
		}

	}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

        boolean isLight = SampleList.THEME == R.style.Theme_Sherlock_Light;

        menu.add("Search")
	        .setIcon(isLight ? R.drawable.ic_search_inverse : R.drawable.ic_search)
	        .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);

        menu.add("Demo")
            .setIcon(isLight ? R.drawable.ic_compose_inverse : R.drawable.ic_compose)
            .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
        
        menu.add("Fragment")
	        .setIcon(isLight ? R.drawable.ic_iphone: R.drawable.ic_iphone)
	        .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);

        menu.add("ApiDemo")
        .setIcon(isLight ? R.drawable.app_adobe : R.drawable.app_adobe)
        .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
        
        menu.add("YouTube")
        .setIcon(isLight ? R.drawable.stat_happy : R.drawable.stat_happy)
        .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
        

        menu.add("Setting")
            .setIcon(isLight ? R.drawable.ic_refresh_inverse : R.drawable.ic_refresh)
            .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
		
        
        menu.add("YTSDK")
        .setIcon(isLight ? R.drawable.yt_ic_launcher : R.drawable.yt_ic_launcher)
        .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
        
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
 
		jG.Log.d("onOptionsItemSelected = " + item.getTitle());
		if (item.getItemId() == android.R.id.home) {

			if (mDrawerLayout.isDrawerOpen(mDrawerList)) {
				jG.Log.d("closeDrawer");
				mDrawerLayout.closeDrawer(mDrawerList);
			} else {
				jG.Log.d("openDrawer");
				mDrawerLayout.openDrawer(mDrawerList);
			}
		}
		CharSequence sTitle = item.getTitle();
		if(sTitle == "Search")
		{
			/*
			Intent intent = new Intent(this, com.wecandoit.jinju_0_0_4.jActivity_YoutubeSearchList.class);
			//Intent intent = new Intent(this, com.wecandoit.jinju_0_0_4.jActivity_Search.class);
			intent.putExtra("tab", "Music");//현제 선택된 탭 카테고리를 기준으로 검색.
			startActivityForResult(intent,ACT_SEARCH);
			
			*/
			
		    Intent intent = new Intent();
		    intent.setComponent(new ComponentName("com.wecandoit.jinju_0_0_4", "com.wecandoit.jinju_0_0_4.jActivity_YoutubeSearchList"));
		    startActivity(intent);
			
		}
		else if(sTitle == "Book_AndExam")
		{
		    Intent intent = new Intent();
		    intent.setComponent(new ComponentName("com.wecandoit.jinju_0_0_4", "com.wecandoit.jinju_0_0_4.jActivity_YoutubeSearchList"));
		    startActivity(intent);
		}
		else if(sTitle == "YTSDK")
		{
			Intent intent = new Intent(this, com.yt.activities.SplashActivity.class);
			startActivity(intent);
		}
		
		else if(sTitle == "Demo")
		{
			Intent intent = new Intent(this, com.actionbarsherlock.sample.demos.SampleList.class);
			startActivity(intent);
		}
		else if(sTitle == "Fragment")
		{
			Intent intent = new Intent(this, com.actionbarsherlock.sample.fragments.SampleList.class);
			startActivity(intent);
		}
		else if(sTitle == "ApiDemo")
		{
			Intent intent = new Intent(this, com.example.android.apis.ApiDemos.class);
			startActivity(intent);
		}
		else if(sTitle == "Setting")
		{
			Intent intent = new Intent(this, com.wecandoit.jinju_0_0_4.jActivity_Preference.class);
			startActivity(intent);
		}
		else if(sTitle == "YouTube")
		{
			Intent intent = new Intent(this, com.examples.youtubeapidemo.YouTubeAPIDemoActivity.class);
			startActivity(intent);
		}
		
		jG.Log.d("Got click: " + sTitle);

		return super.onOptionsItemSelected(item);
	}
 
	// ListView click listener in the navigation drawer
	private class DrawerItemClickListener implements
			ListView.OnItemClickListener {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id) {
			selectItem(position);
		}
	}
 
	private void selectItem(int position) {
 
		FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
		// Locate Position
		switch (position) {
		case 0:
			ft.replace(R.id.content_frame, fragment_home);
			break;
		case 1:
			ft.replace(R.id.content_frame, fragment_myfile);
			break;
		default:
			ft.replace(R.id.content_frame, fragment_home);
			break;
		}
		ft.commit();
		mDrawerList.setItemChecked(position, true);
		// Get the title followed by the position
		setTitle(title[position]);
		// Close drawer
		mDrawerLayout.closeDrawer(mDrawerList);
	}
 
	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);
		// Sync the toggle state after onRestoreInstanceState has occurred.
		mDrawerToggle.syncState();
	}
 
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		// Pass any configuration change to the drawer toggles
		mDrawerToggle.onConfigurationChanged(newConfig);
	}
 
	@Override
	public void setTitle(CharSequence title) {
		mTitle = title;
		getSupportActionBar().setTitle(mTitle);
	}
 
	@Override
	public void onBackPressed() {
 
		FragmentManager manager = getSupportFragmentManager();
		if (manager.getBackStackEntryCount() > 0) {
			// If there are back-stack entries, leave the FragmentActivity
			// implementation take care of them.
			manager.popBackStack();
 
		} else {
			// Otherwise, ask user if he wants to leave :)
			super.onBackPressed();
		}
	}
	final static int ACT_SEARCH = 0;
	
	@Override
	protected void onActivityResult (int requestCode, int resultCode, Intent data) {
		switch (requestCode) {
		case ACT_SEARCH:
			if (resultCode == RESULT_OK) {
				jG.Log.d(data.getStringExtra("SelectedURL"));
			}
			break;
		}
	}	
}